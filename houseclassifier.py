# -*- coding: utf-8 -*-
"""HouseClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_0Qk0WtTKlkaehBA0GKvXRT4u8auhV3Q

# House Classifier

Group:
- Amanda Alves Guimar√£es
- Pietro Masur

The house classifier will tell you if the image you uploaded contains either a castle, an igloo or a hut.

First of all, we must install the packages we need to execute this notebook.
"""

#hide
!pip install -Uqq fastbook
import fastbook
fastbook.setup_book()

#hide
from fastbook import *
from fastai.vision.widgets import *

"""Now, we need to insert the key and download the images."""

key = os.environ.get('AZURE_SEARCH_KEY', 'e6c303f4168e494b81536613658455fc')

results = search_images_bing(key, 'castle')
imsCastle = results.attrgot('content_url')
len(imsCastle)

ims = ['https://th.bing.com/th/id/OIP.O-5gAsLHl8ZkrBjXYP22bgHaFc?pid=ImgDet&rs=1']

import os
os.mkdir('images') #if you are running this notebook for the second time, you need to delete this line.
dest = 'images/castle.jpg'
download_url(ims[0], dest)

houses_types = 'castle','igloo','hut'
path = Path('houses')

if not path.exists():
    path.mkdir()
    for o in houses_types:
        dest = (path/o)
        dest.mkdir(exist_ok=True)
        results = search_images_bing(key, f'{o}')
        download_images(dest, urls=results.attrgot('contentUrl'))

fns = get_image_files(path)
fns

failed = verify_images(fns)
failed

failed.map(Path.unlink);

houses = DataBlock(
    blocks=(ImageBlock, CategoryBlock), 
    get_items=get_image_files, 
    splitter=RandomSplitter(valid_pct=0.2, seed=42),
    get_y=parent_label,
    item_tfms=Resize(128))

dls = houses.dataloaders(path)

dls.valid.show_batch(max_n=4, nrows=1)

houses = houses.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2))
dls = houses.dataloaders(path)
dls.train.show_batch(max_n=8, nrows=2, unique=True)

houses = houses.new(
    item_tfms=RandomResizedCrop(224, min_scale=0.5),
    batch_tfms=aug_transforms())
dls = houses.dataloaders(path)

learn = cnn_learner(dls, resnet34, metrics=error_rate) 
learn.fine_tune(4)

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

interp.plot_top_losses(5, nrows=1)

cleaner = ImageClassifierCleaner(learn)
cleaner

#for idx in cleaner.delete(): cleaner.fns[idx].unlink()

"""We improved the model using the techniques from chapter 5.



"""

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fine_tune(1, base_lr=0.1)

learn = cnn_learner(dls, resnet34, metrics=error_rate)
lr_min,lr_steep = learn.lr_find()

print(f"Minimum/10: {lr_min:.2e}, steepest point: {lr_steep:.2e}")

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fine_tune(2, base_lr=2e-3)

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fit_one_cycle(3, 2e-3)

learn.unfreeze()

learn.lr_find()

learn.fit_one_cycle(3, lr_max=1e-4)

learn = cnn_learner(dls, resnet34, metrics=error_rate)
learn.fit_one_cycle(1, 2e-3)
learn.unfreeze()
learn.fit_one_cycle(12, lr_max=slice(1e-6,1e-4))

learn.recorder.plot_loss()

"""Now we are going to export our model."""

learn.export()

path = Path()
path.ls(file_exts='.pkl')

learn_inf = load_learner(path/'export.pkl')

learn_inf.predict('houses/castle/00000000.jpg')

learn_inf.dls.vocab

btn_upload = widgets.FileUpload()
##btn_upload

out_pl = widgets.Output()
out_pl.clear_output()
##with out_pl: display(img.to_thumb(128,128))
##out_pl

##pred,pred_idx,probs = learn_inf.predict(img)

lbl_pred = widgets.Label()
##lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'
##lbl_pred

btn_run = widgets.Button(description='Classify')
##btn_run

def on_click_classify(change):
    img = PILImage.create(btn_upload.data[-1])
    out_pl.clear_output()
    with out_pl: display(img.to_thumb(128,128))
    pred,pred_idx,probs = learn_inf.predict(img)
    lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'

btn_run.on_click(on_click_classify)

btn_upload = widgets.FileUpload()

"""The widgets:"""

VBox([widgets.Label('Select your house!'), 
      btn_upload, btn_run, out_pl, lbl_pred])

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()